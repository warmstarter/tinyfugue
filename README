TinyFugue 50b8 with numerous patches and improvements

UTF8 support (--enable-widechar=yes)
PYTHON interpreter support for interfacing with client and macros
PYTHON 2.7 and 3 are both supported
/HELP has been spell checked, along with everything else
HTML documentation and html2tf found and returned to repo
ANSI log output (/help ansi_log) off by default
LOGs output prefix, such as timestamp (/help log_prefix) off by default
ERROR output prefix now adjustable (/help error_prefix) '%' by default
UNNAMED worlds not wrapped in () (/help oldunnamed) no-() by default
FG world switching can use TF4 stle (/help oldstylefg) off by default
@ALERT picks up on messages that could have been lost
/ as a prefix to /command sends to MU, as opposed to ///command
SSL looks for GNU TLS
SSL verifies cert chain and check for self-signed, only warn by default
ATCP protocol support (--enable-atcp=yes) off by default
GMCP protocol support (--enable-gmcp=yes) off by default
OPTION 102 protocol support (--enable-option102=yes) off by default
MCCP protocol lockup issue resolved
RFC 2066 compliance for Telnet Charset Negotiation
PCRE unbundled and now can use system libraries
GCC 10 and CLANG support
64-bit crash issues resolved
MULTI-address hostname crash issue resolved
OS X compile issues resolved
BUFFERS increased to reflect more modern computing resources
TF-LIB being maintained as well.

Plus numerous bug fixes, clean-up, and needed code base
clean-up and modernization.

Significant effort has been put into finding the various community
patches for TF50b8 and integrating them all into one place. There
are still several patches in the queue waiting to be examined and
then potentially applied.

In addition, new work has been added to this code base and will
probably continue to be for some time. The intention is to make sure
a well loved piece of software is still able to be run on modern
platforms and future platforms, increased stability, and then lastly
to add some additional features in-line with the existing codebase.

Similar efforts are being done with TinyFugue Macros, and some may later
be integrated into tf-lib:

https://github.com/warmstarter/tinyfugue-scripts

Deprecations:

NO_FLOAT deprecated. This has been broken for over a decade and has little
purpose on modern computer systems.

OS/2 deprecated. This was not being maintained and likely not used by anyone.
If needed the old sources are in the git history.

CYGWIN deprecated in favor of WSL for Windows, to better keeps platofmrs
in-sync and remove issues.

BeOS deprecated as likely no longer used. Should still compile, but might
require some modifications for installation of binary, no way to test.

SOCKS deprecated as it was broken and mostly removed anyway. Very little
use in modern world and can be handled by a separate application.

======

Unicode notes:
  "Release" is the branch you want.
  On Debian or Ubuntu, make sure you apt-get libicu-dev before running
  ./configure.
  There is a known and easily triggered bug: The backspace, delete, and
  arrow keys move by bytes, not by characters. For now, editing a line
  with multibyte characters will send XML hexadecimal escape codes
  if unencodeable bytes are in the input box.
  I will gladly accept pull requests.

  Setting your terminal to send ^H instead of ^? for backspace mitigates
  some, but not all of the backspace issues.

  For servers that don't negotiate charsets, /set default_charset=NAME
  before defining a world with /addworld or /test addworld(). I recommend
  putting /set default_charset=Latin-1 at the top of your worlds.tf.

======



                       INSTALLING TINYFUGUE

TinyFugue can be installed and run on UNIX-like systems, Mac OS X,
and Win32.  For instructions, see the README file in the appropriate
directory.  For information on unofficial versions of TF for other
operating systems, see the TF web page at http://tinyfugue.sourceforge.net/.

"Make" options
--------------

Options are not available on all systems.  To use an option, give it as
an argument to the installation program (e.g., "make clean").

 all		Compile, but do not install (the "install" option should be
			run later to install the files).
 install	Compile (if you haven't already) and install.  The default
			installation locations depend on the operating system.
 clean		Remove object files and other junk from source directory.
 uninstall	Remove tf executable, help files, and library from their
			installed locations.


Public Installation
-------------------

Some features of TF can be disabled for secure public installation, by
using one of these /restrict commands in %{TFLIBDIR}/local.tf:

    /restrict SHELL  Prevents all access to shell or external commands.
                     Disables TF builtins "/sh" and "/quote !", and
                     uncompression during /load and /help.

    /restrict FILE   Prevents reading and writing of files.  Disables
                     TF builtins "/load", "/save", "/saveworld", "/log",
                     and "/quote '", and sockmload feature.
                     Implies /restrict shell.

    /restrict WORLD  Prevents the user from defining new worlds and
                     connecting to undefined worlds.  TF builtins
                     /addworld and the "/world <host> <port>" semantics
                     are disabled.  Implies /restrict file.

If you have write permission in /usr/local/bin and /usr/local/lib, TinyFugue
will be installed there by default.  Or you can change the locations by using
the options described above.  The Makefile will then put all files in their
proper location with the proper permissions.

Some features of TF can be disabled for secure public installation, by using
the /restrict commands in %{TFLIBDIR}/local.tf.  See ../README.

Terminal Handling
-----------------

If the default terminal handling option does not work, tf can be
configured to use vt100 codes or nothing at all.  See the README
file in the subdirectory corresponding to your operating system.

On a UNIX-like system, ./configure will try to find a termcap-compatible library
in this order: the one specified in --enable-termcap=LIB, if any; termcap;
ncurses; curses.  If none of those work, tf will use hardcoded vt100 codes.


Compression
-----------

If you are short on disk space, you can compress the helpfile and
library files (except stdlib.tf).  Make sure the COMPRESS_SUFFIX
and COMPRESS_READ macros are set correctly; set them in the
%{TFLIBDIR}/local.tf file if needed.  Note that compression can not
be used if /restrict is used.


Firewalls
---------

TF can be made to connect through a generic proxy server by setting
the %proxy_host variable at runtime.  See "/help proxy".

Also see the README file in the subdirectory corresponding to your
operating system to see if tf has transparent firewall support on your
system.


Credits
-------

This fork of TinyFugue is currently being supported by Kruton,
Sketch, and wstarter. It also includes assorted patches developed
by various community members in the years since TF saw saw it's
final release.

TinyFugue is Copyright (C) 1993-2007 Ken Keys (kenkeys@users.sourceforge.net)

For a long time TinyFugue was written, maintained, and copyrighted
by Ken Keys ("Hawkeye"), who can be reached by email at kkeys@ucsd.edu.
His final release was 50b8 in January 2007, but he is still active
in giving support at https://sourceforge.net/p/tinyfugue

TinyFugue versions 1.5.3 and earlier were written by Greg Hudson
("Explorer_Bob"), without whom I would have never gotten into this mess.

TinyFugue was initially derived from tinytalk, a unix client written by
Anton Rang ("Tarrant") and modified by Leo Plotkin ("Grod").

Additional thanks to Jeff Prothero ("Cynbe"), Bruce Sterling Woodcock
("Bruce"), David Moore ("OliverJones"), Ben Jackson ("Ben"), the mudders of
glia.biostr.washington.edu, and everyone else who tested, found bugs,
or came up with suggestions, and to Jim Lick ("Jingoro") for providing
tcp.com services.

============================================
TinyFugue for Mac OS X

You must have the developer tools installed on your system.
Open a shell window, and follow the instructions in unix/README.

----------------------------------------------------------------

TinyFugue for Win32

The likely best option for running TinyFugue under Windows is to
get 'Windows Subsystem for Linux'. This should be straight-forward
and give you an almost identical experience to a TinyFugue on UNIX
like systems, but it has not yet been tested.

https://docs.microsoft.com/en-us/windows/wsl/install-win10

Once installed, open a shell window, and follow the instructions in
unix/README.
======================================================================

                      TinyFugue for UNIX-like systems
		            (including MacOS X)


Installing TinyFugue
--------------------

TinyFugue should work on any Unix-like system that has an ANSI compiler
and BSD-style select().  This includes almost everything except some old
SVR3-like systems which either do not have select(), or have a select()
that works only on STREAMS devices but not terminals.

Installing TinyFugue is quite easy on most Unix-like systems.
In the top directory, execute these commands:
  ./configure
  make install
The configure script will attempt to figure out everything it needs to
know about your system and install all files in their proper location.
If you have any problems, or want to change a default installation
option, be sure to read the rest of this file.


In addition to the usual GNU configure options, TinyFugue's configure script
has these options:


  --enable-version        insert version number into names of installed files
                          (equivalent to --program-suffix=\"-${TFVER}\")
  --enable-symlink=NAME make a symlink NAME to the executable
                          NAME=BINDIR/tf
  --enable-core           enable debugging core files
  --disable-ssl           disable SSL support
  --enable-getaddrinfo    enable getaddrinfo() (if configure complains)
  --disable-getaddrinfo   disable getaddrinfo() (implies --disable-inet6)
  --disable-inet6         disable IPv6 support
  --disable-termcap       use hardcoded vt100 codes instead of termcap
  --enable-termcap=LIB    enable termcap with library LIB (e.g., "ncurses")
                          (needed only if configure guesses incorrectly)
  --disable-256colors     disable 256 color support (may reduce memory use)
  --disable-mailcheck     disable mail checking
  --enable-mailcheck=DIR  enable checking for mail in directory DIR
                          (needed only if configure guesses incorrectly)
  --disable-history       disable /recall and other history features
  --disable-process       disable /quote and /repeat
  --disable-float         disable floating point arithmetic and functions
  --disable-widechar      disable wide character support (UTF-8)
  --enable-atcp           enable ATCP support
  --enable-gmcp           enable GMCP support
  --enable-option102      enable 102 option support
  --with-incdirs=DIRS     search for include files in DIRS
  --with-libdirs=DIRS     search for libraries in DIRS
  --with-inclibdirs=DIRS  same as --with-incdirs=DIRS --with-libdirs=DIRS
  --with-inclibpfx=DIRS   same, but appends '/include' and '/lib'

For a complete list of options, run "./configure --help".

The following environment variables are meaningful to configure.  Their
default values are listed in brackets after the description.  They can
be set on the command line like this:
  env CPPFLAGS=-I/my/include ./configure

  CC		C compiler ["gcc" or "cc"]
  CFLAGS	Options for C compiler ["-g -O2" or "-O2" for gcc,
		"-g" for others]
  CPPFLAGS	Options for C preprocessor (e.g. -I) [""]
  LIBS		"-l" and "-L" options for the linker (in addition to the ones
		determined automatically by configure).

Example:
If your system has SSL libraries and headers installed in
/usr/local/SSL/{lib,include}, use the "--with-inclibpfx=/usr/local/SSL"
option with configure.


File Locations
--------------

If you do not define the file prefix with ./configure --prefix=PREFIX,
configure will choose a prefix:

   "/usr/local" if you can write to /usr/local/bin and /usr/local/share;
   otherwise, $HOME.

The executable is installed in ${bindir}; the macro libraries are installed
in ${datadir}.  These can be modified with the standard configure options
--bindir, --datadir, and --prefix.

If --enable-version is given, the tf executable and library directory will
have a version number embedded in their names (e.g., PREFIX/bin/tf-50a1 and
PREFIX/lib/tf-50a1-lib).  This is useful if you want to keep old versions
around.  To create a symlink from "tf" to the actual executable, use
--enable-symlink (this is not implied by --enable-version, as in earlier
releases).

There is no man page for tf.  For basic usage options, run "tf -?".  For
more information, use "/help" within tf.

If you move or rename any files after installing (this includes copying
TF to another machine where the file paths are different), you must let
TF know.  To do this without reinstalling, you can set the environment variable
TFLIBDIR to the new path before running tf, or run tf with the -L option.
This can be done with a shell script like this:

    #! /bin/sh
    exec /new/location/bin/tf -L"/new/location/lib/tf-lib" "$@"

The variables TFHELP and TFLIBRARY can also be set in the environment,
but this should not normally be necessary, since their default values are
based on TFLIBDIR.

If you want build tf for installation in one directory ("{FINAL}"), but you
want to be able to test it by installing it in another directory ("{TEMP}")
first, do:
    ./configure --prefix={FINAL}
    make
    env prefix={TEMP} make -e install
Then, you can test tf by running
    {TEMP}/bin/tf -L{TEMP}/lib
When you are satisfied it works, do
    make install
to install tf in {FINAL}.



Installation Problems
---------------------

The ./configure script can usually figure out everything it needs to
know to configure TinyFugue for your unix-like system.  But if it fails
because your system is brain damaged, you may need to change some environment
variables or disable some features.


Problem: On MacOS X, configure fails with the message "configure: error:
  C compiler cannot create executables".  Also, config.log contains the
  message "ld: can't locate file for: -lcrt1.o".
Solution:  The file /usr/lib/crt1.o is missing from your system.  Restore it
  by reinstalling the DevTools ("Xcode Tools 1.1").  Copying the file
  from another OSX box also appears to work, but do this at your own risk.
  See also http://thread.gmane.org/gmane.os.apple.fink.beginners/9914

Problem: On AIX 4.1, a bug in gcc 2.8.0 causes /addworld and some operators to
  fail with an error like "% internal error: reduce: bad op 037777777703"
Solution: use a different compiler (cc or xlc) by setting the CC environment
  variable before running ./configure, or use a different version of gcc
  (2.7.2 is known to work).

Problem: On OSF/1 with gcc, compile errors involving 'sigval_t',
  'union sigval', or 'clock_id'.
Solution: use a different compiler (cc) by setting the CC environment
  variable before running ./configure.

Problem: With gcc, compile errors involving va_list or __builtin_va_alist.
Solution: use a different compiler (cc) by setting the CC environment
  variable before running ./configure.

Problem: Your system is Apollo Domain/OS.
Solution: in Config: FLAGS='-U__STDC__' (XXX this is wrong XXX)

Problem: On debian linux, undefined references to tgetent, tgetstr, tgetnum,
  tgoto, tputs.
Solution: Get an ELF termcap library, or add /usr/i486-linuxaout/bin to your
  PATH.

Problem: On DYNIX/ptx 4 or later, runtime error saying that -linet is not
  needed.  (Why do they have it if it's not needed!?)
Solution: Run ./configure, edit src/Makefile to remove "-linet"
  from the LIBS line, and run "make".

Problem: when you try to run tf, you get a message like this:
  ld.so.1: ./tf: fatal: libncurses.so.5: open failed: No such file or directory
Solution 1: set the environment variable LD_LIBRARY_PATH to "/usr/local/lib"
  when running tf.
Solution 2: on SunOS, set environment variable LDFLAGS to "-R/usr/local/lib"
  when running ./configure.  On other operating systems, different options
  may be available; see "man ld" (try "-rpath /usr/local/lib").

